"""Test the generated audio from some testing model."""

import os
import sys
import pickle
import numpy as np
import pandas as pd
from music21 import instrument, note, stream, chord

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
from tensorflow.keras.models import load_model

sys.path.append('./')
from source.models import base_model
# from source.data_modules import sequence


def create_midi(prediction_output, test_id):
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp=f'./outputs/{test_id}_output.mid')


def generate_notes(model, network_input, pitchnames, n_vocab):
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    for note_index in range(200):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        # index = np.argmax(prediction)
        indices = np.argsort(prediction[0])[::-1][:3]
        index = np.random.choice(indices)
        
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output


def prepare_sequences(notes, pitchnames, n_vocab, seq_length):
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = seq_length
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)


def generate(test_id):
    data_path = './data/notes_chopin_train'
    
    try:
        with open(data_path, 'rb') as d:
            notes = pickle.load(d)
    except Exception as ex:
        print()
        print(f"Failed to load {data_path} due to: {ex}")
        print("Exiting...")
        exit()
        
    df = pd.read_csv('./tests.csv')
    
    sequence_length = int(df['sequence_length'][test_id-1])
        
    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))
    
    # Get all pitch names
    n_vocab = len(set(notes))

    network_input, normalized_input = prepare_sequences(notes, pitchnames, n_vocab, sequence_length)
    model = load_model(f'./model_ckpts/{test_id}_model.keras', compile=False)
    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab)
    create_midi(prediction_output, test_id)

    try:
        os.remove(f'./model_ckpts/{test_id}_model.keras')
    except Exception as ex:
        print()
        print(f"Failed to delete keras model due to {ex}")


if __name__ == "__main__":
    test_id = 10

    generate(test_id)